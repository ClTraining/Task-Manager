using System;
using AutoMapper;
using EntitiesLibrary;
using EntitiesLibrary.CommandArguments;
using FluentAssertions;
using Xunit;

namespace TaskManagerServiceLibrary.TaskManager
{
    public class TaskMapper : ITaskMapper
    {
        public TaskMapper()
        {
<<<<<<< HEAD
            Mapper.CreateMap<ServiceTask, ClientTask>();
=======
            Mapper.CreateMap<ServiceTask, ClientPackage>();
            Mapper.CreateMap<ClientPackage, ServiceTask>();

            Mapper.CreateMap<ICommandArguments, ServiceTask>()
                .Include<ClearDateTaskArgs, ServiceTask>()
                .ForMember(s => s.DueDate, o => o.MapFrom(a => (a as ClearDateTaskArgs).Date))
                .Include<CompleteTaskArgs, ServiceTask>()
                .ForMember(s => s.IsCompleted, o => o.MapFrom(a => true))
                .Include<RenameTaskArgs, ServiceTask>()
                .ForMember(s => s.Name, o => o.MapFrom(a => (a as RenameTaskArgs).Name))
                .Include<SetDateTaskArgs, ServiceTask>()
                .ForMember(s => s.DueDate, o => o.MapFrom(a => (a as SetDateTaskArgs).DueDate));
>>>>>>> 799a97aee3dc15959fd4cd7a37cf028fec760d63
        }

        public ClientTask ConvertToContract(ServiceTask task)
        {
            return Mapper.Map<ServiceTask, ClientTask>(task);
        }
    }

    public class TaskMapperTests
    {
        private readonly ClientTask contractTask = new ClientTask {Id = 10, Name = "service", IsCompleted = true};
        private readonly ServiceTask serviceTask = new ServiceTask {Id = 10, Name = "service", IsCompleted = true};
        private readonly TaskMapper mapper = new TaskMapper();

        [Fact]
        public void contract_task_should_be_equivalent_to_service_task()
        {
            var res = mapper.ConvertToContract(serviceTask);
            res.ShouldBeEquivalentTo(contractTask);
        }

        [Fact]
        public void should_return_null_if_null_passed_convert_from_service()
        {
            var result = mapper.ConvertToContract(null);
            result.Should().BeNull();
        }
    }
}